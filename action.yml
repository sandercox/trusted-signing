name: 'Trusted Signing'
description: 'Sign your files with Trusted Signing.'
inputs:
  cache-dependencies:
    description: A boolean value (true/false) that indicates if the dependencies for this action should be cached
                 by GitHub or not. The default value is true. When using self-hosted runners, caches from workflow
                 runs are stored on GitHub-owned cloud storage. A customer-owned storage solution is only available
                 with GitHub Enterprise Server. When enabled, this option can reduce the duration of the action by
                 at least 1 minute.
    required: false
    default: 'true'
  
  endpoint:
    description: The endpoint to use for signing.
    required: false
    default: 'https://weu.code-signing.azure.com'
  
  account_name:
    description: The name of the account to use for signing.
    required: true

  profile_name:
    description: The name of the profile to use for signing.
    required: true

  correlation_id:
    description: The correlation ID to use for signing - this helps keeping track in the Azure portal where the 
                 signing request came from.
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Set variables
      id: set-variables
      shell: 'pwsh'
      run: |
        $defaultPath = $env:PSModulePath -split ';' | Select-Object -First 1
        "PSMODULEPATH=$defaultPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        
        "TRUSTED_SIGNING_MODULE_VERSION=0.5.0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "BUILD_TOOLS_NUGET_VERSION=10.0.22621.3233" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "BUILD_TOOLS_VERSION=10.0.22621.0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "TRUSTED_SIGNING_NUGET_VERSION=1.0.53" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "DOTNET_SIGNCLI_NUGET_VERSION=0.9.1-beta.24469.1" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Cache TrustedSigning PowerShell module
      id: cache-module
      uses: actions/cache@v4
      env:
        cache-name: cache-module
      with:
        path: ${{ steps.set-variables.outputs.PSMODULEPATH }}\TrustedSigning\${{ steps.set-variables.outputs.TRUSTED_SIGNING_MODULE_VERSION }}
        key: TrustedSigning-${{ steps.set-variables.outputs.TRUSTED_SIGNING_MODULE_VERSION }}
      if: ${{ inputs.cache-dependencies == 'true' }}
  
    - name: Cache Microsoft.Windows.SDK.BuildTools NuGet package
      id: cache-buildtools
      uses: actions/cache@v4
      env:
        cache-name: cache-buildtools
      with:
        path: ~\AppData\Local\TrustedSigning\Microsoft.Windows.SDK.BuildTools
        key: Microsoft.Windows.SDK.BuildTools-${{ steps.set-variables.outputs.BUILD_TOOLS_NUGET_VERSION }}
      if: ${{ inputs.cache-dependencies == 'true' }}

    - name: Cache Microsoft.Trusted.Signing.Client NuGet package
      id: cache-tsclient
      uses: actions/cache@v4
      env:
        cache-name: cache-tsclient
      with:
        path: ~\AppData\Local\TrustedSigning\Microsoft.Trusted.Signing.Client
        key: Microsoft.Trusted.Signing.Client-${{ steps.set-variables.outputs.TRUSTED_SIGNING_NUGET_VERSION }}
      if: ${{ inputs.cache-dependencies == 'true' }}

    - name: Install Microsoft.Windows.SDK.BuildTools NuGet package
      shell: 'pwsh'
      run: |
        Invoke-WebRequest -Uri https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile .\nuget.exe  
        mkdir ~\AppData\Local\TrustedSigning
        $outputDir = [System.IO.Path]::Combine($env:USERPROFILE, 'AppData\Local\TrustedSigning')
        .\nuget.exe install Microsoft.Windows.SDK.BuildTools -Version ${{ steps.set-variables.outputs.BUILD_TOOLS_NUGET_VERSION }} -x -OutputDirectory $outputDir
        rm nuget.exe
      if: ${{ inputs.cache-dependencies != 'true' || steps.cache-buildtools.outputs.cache-hit != 'true' }}

    - name: Install Microsoft.Trusted.Signing.Client NuGet package
      shell: 'pwsh'
      run: |
        Invoke-WebRequest -Uri https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile .\nuget.exe  
        $outputDir = [System.IO.Path]::Combine($env:USERPROFILE, 'AppData\Local\TrustedSigning')
        .\nuget.exe install Microsoft.Trusted.Signing.Client -Version ${{ steps.set-variables.outputs.TRUSTED_SIGNING_NUGET_VERSION }} -x -OutputDirectory $outputDir
        rm nuget.exe
      if: ${{ inputs.cache-dependencies != 'true' || steps.cache-tsclient.outputs.cache-hit != 'true' }}

    - name: Install Trusted Signing module
      shell: 'pwsh'
      run: |
        Install-Module -Name TrustedSigning -RequiredVersion ${{ steps.set-variables.outputs.TRUSTED_SIGNING_MODULE_VERSION }} -Force -Repository PSGallery
      if: ${{ inputs.cache-dependencies != 'true' || steps.cache-module.outputs.cache-hit != 'true' }}

    - name: Prepare metadata.json
      shell: 'pwsh'
      run: |
        $metadata = @{
          "Endpoint" = "${{ inputs.endpoint }}"
          "CodeSigningAccountName" = "${{ inputs.account_name }}"
          "CertificateProfileName" = "${{ inputs.profile_name }}"
          "CorrelationId" = "${{ inputs.correlation_id }}"
        }
        $metadata | ConvertTo-Json | Out-File -FilePath $env:USERPROFILE\AppData\Local\TrustedSigning\metadata.json

    - name: Create sign tool script
      shell: 'pwsh'
      run: | 
        $arch=($env:PROCESSOR_ARCHITECTURE).replace("AMD","x")

        echo "@echo off" > $env:USERPROFILE\AppData\Local\TrustedSigning\trusted-signing.cmd
        echo "set SIGN_TOOL=$env:USERPROFILE\AppData\Local\TrustedSigning\Microsoft.Windows.SDK.BuildTools\bin\${{ steps.set-variables.outputs.BUILD_TOOLS_VERSION }}\$arch\signtool.exe" >> $env:USERPROFILE\AppData\Local\TrustedSigning\trusted-signing.cmd
        echo "set TRUSTED_SIGNING_DLL=$env:USERPROFILE\AppData\Local\TrustedSigning\Microsoft.Trusted.Signing.Client\bin\$ARCH\Azure.CodeSigning.Dlib.dll" >> $env:USERPROFILE\AppData\Local\TrustedSigning\trusted-signing.cmd
        echo "set METADATA=$env:USERPROFILE\AppData\Local\TrustedSigning\metadata.json" >> $env:USERPROFILE\AppData\Local\TrustedSigning\trusted-signing.cmd
        echo """%SIGN_TOOL%"" sign /v  /fd SHA256 /tr ""http://timestamp.acs.microsoft.com"" /td SHA256 /dlib ""%TRUSTED_SIGNING_DLL%"" /dmdf ""%METADATA%"" %*" >> $env:USERPROFILE\AppData\Local\TrustedSigning\trusted-signing.cmd
        echo "TRUSTED_SIGNTOOL=$env:USERPROFILE\AppData\Local\TrustedSigning\trusted-signing.cmd" >> $env:GITHUB_ENV
